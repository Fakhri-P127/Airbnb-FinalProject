// <auto-generated />
using System;
using Airbnb.Persistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Airbnb.Persistance.Context.Migrations
{
    [DbContext(typeof(AirbnbDbContext))]
    partial class AirbnbDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDisplayed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilPicture")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Work")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7375a39-5d8b-4a87-be3e-f337b17351f8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ccdb459a-a92c-4ec9-bae3-96421b4380e6",
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(4067),
                            DateOfBirth = new DateTime(2000, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seedEmail1@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Fexri",
                            IsDisplayed = true,
                            Lastname = "Efendiyev",
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(4079),
                            PhoneNumber = "+994503661012",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "fexri2000"
                        },
                        new
                        {
                            Id = new Guid("a3214b8b-4250-4112-b460-6dd4f4c3b469"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b36301df-3a39-45cd-95a3-38e824523303",
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(4147),
                            DateOfBirth = new DateTime(1999, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seedEmail2@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Eli",
                            IsDisplayed = true,
                            Lastname = "Efendiyev",
                            LockoutEnabled = false,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(4150),
                            PhoneNumber = "+994503660012",
                            PhoneNumberConfirmed = true,
                            TwoFactorEnabled = false,
                            UserName = "eli1999"
                        });
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.AppUserLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("LanguageId");

                    b.ToTable("AppUserLanguages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89099bd7-cd47-4cfd-bc30-f2a0097ae921"),
                            AppUserId = new Guid("f7375a39-5d8b-4a87-be3e-f337b17351f8"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(7286),
                            IsDisplayed = true,
                            LanguageId = new Guid("e5505dc9-69a2-4d83-a062-6581810a3d17"),
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(7292)
                        },
                        new
                        {
                            Id = new Guid("80392dfc-c4c8-409f-a88a-545f55399e2c"),
                            AppUserId = new Guid("f7375a39-5d8b-4a87-be3e-f337b17351f8"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(7311),
                            IsDisplayed = true,
                            LanguageId = new Guid("26eba03e-5f06-49a1-9b83-bea1ec1e4d76"),
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(7313)
                        },
                        new
                        {
                            Id = new Guid("f3d622ae-4c62-4514-a962-d713828b3fb5"),
                            AppUserId = new Guid("f7375a39-5d8b-4a87-be3e-f337b17351f8"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(7324),
                            IsDisplayed = true,
                            LanguageId = new Guid("9e83464f-5b90-47f7-bf7e-674413c26c5c"),
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(7325)
                        },
                        new
                        {
                            Id = new Guid("71787a79-2e2b-47c3-b0b3-4576b38b78d0"),
                            AppUserId = new Guid("f7375a39-5d8b-4a87-be3e-f337b17351f8"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(7333),
                            IsDisplayed = true,
                            LanguageId = new Guid("066ecfc5-af54-41f4-82e4-5239d9c4109c"),
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(7335)
                        },
                        new
                        {
                            Id = new Guid("20090680-1876-4bec-9d5d-ea8e17a43cb5"),
                            AppUserId = new Guid("f7375a39-5d8b-4a87-be3e-f337b17351f8"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(7360),
                            IsDisplayed = true,
                            LanguageId = new Guid("6b4d5ca6-d36a-4392-82fa-cdf349e9273c"),
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 766, DateTimeKind.Local).AddTicks(7361)
                        });
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdb3b42e-1a68-4132-aed8-53027b085827"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 767, DateTimeKind.Local).AddTicks(1441),
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 767, DateTimeKind.Local).AddTicks(1449),
                            Name = "Male"
                        },
                        new
                        {
                            Id = new Guid("3b61c0e6-3dc1-4b93-bf94-f611c963981e"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 767, DateTimeKind.Local).AddTicks(1464),
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 767, DateTimeKind.Local).AddTicks(1465),
                            Name = "Female"
                        },
                        new
                        {
                            Id = new Guid("9c67d510-ce5c-431f-a0fc-0b484b7d677e"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 767, DateTimeKind.Local).AddTicks(1469),
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 767, DateTimeKind.Local).AddTicks(1470),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.GuestReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("GuestScore")
                        .HasColumnType("real");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDisplayed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("HostId");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("GuestReviews");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5505dc9-69a2-4d83-a062-6581810a3d17"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 768, DateTimeKind.Local).AddTicks(519),
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 768, DateTimeKind.Local).AddTicks(523),
                            Name = "Azerbaijani"
                        },
                        new
                        {
                            Id = new Guid("9e83464f-5b90-47f7-bf7e-674413c26c5c"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 768, DateTimeKind.Local).AddTicks(532),
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 768, DateTimeKind.Local).AddTicks(534),
                            Name = "English"
                        },
                        new
                        {
                            Id = new Guid("26eba03e-5f06-49a1-9b83-bea1ec1e4d76"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 768, DateTimeKind.Local).AddTicks(542),
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 768, DateTimeKind.Local).AddTicks(544),
                            Name = "Japanese"
                        },
                        new
                        {
                            Id = new Guid("6b4d5ca6-d36a-4392-82fa-cdf349e9273c"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 768, DateTimeKind.Local).AddTicks(552),
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 768, DateTimeKind.Local).AddTicks(555),
                            Name = "Russian"
                        },
                        new
                        {
                            Id = new Guid("066ecfc5-af54-41f4-82e4-5239d9c4109c"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 768, DateTimeKind.Local).AddTicks(564),
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 768, DateTimeKind.Local).AddTicks(583),
                            Name = "Turkish"
                        });
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBeenUsed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("Token");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.AirCover", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookingProtectionGuarantee")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CheckInGuarantee")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FindMore")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FullDaySafetyLine")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GetWhatYouBookedGuarantee")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("AirCovers");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AmenityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("AmenityTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.AmenityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AmenityTypes");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.CancellationPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullRefund")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NoRefund")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PartialRefund")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CancellationPolicies");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PrivacyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PrivacyTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1a4b55b-4c6e-49af-8752-0522d6d1ad2f"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 770, DateTimeKind.Local).AddTicks(743),
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 770, DateTimeKind.Local).AddTicks(752),
                            Name = "Full apartment"
                        },
                        new
                        {
                            Id = new Guid("808a7deb-a315-4e10-8452-559dcb535134"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 770, DateTimeKind.Local).AddTicks(766),
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 770, DateTimeKind.Local).AddTicks(768),
                            Name = "Shared house"
                        },
                        new
                        {
                            Id = new Guid("c181ea90-47be-4652-a657-66ba2894b667"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 770, DateTimeKind.Local).AddTicks(776),
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 770, DateTimeKind.Local).AddTicks(777),
                            Name = "Private room"
                        });
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AirCoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("BathroomCount")
                        .IsRequired()
                        .HasColumnType("tinyint");

                    b.Property<byte?>("BedCount")
                        .IsRequired()
                        .HasColumnType("tinyint");

                    b.Property<byte?>("BedroomCount")
                        .IsRequired()
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("CancellationPolicyId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("CheckOutTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDisplayed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPetAllowed")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .IsRequired()
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitude")
                        .IsRequired()
                        .HasColumnType("decimal(11,8)");

                    b.Property<byte?>("MaxGuestCount")
                        .IsRequired()
                        .HasColumnType("tinyint");

                    b.Property<byte?>("MaxNightCount")
                        .IsRequired()
                        .HasColumnType("tinyint");

                    b.Property<byte?>("MinNightCount")
                        .IsRequired()
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Price")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid?>("PrivacyTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyGroupId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyTypeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AirCoverId");

                    b.HasIndex("CancellationPolicyId");

                    b.HasIndex("HostId");

                    b.HasIndex("PrivacyTypeId");

                    b.HasIndex("PropertyGroupId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PropertyAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AmenityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyAmenities");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PropertyGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PropertyGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9138421c-0e9f-4d23-85dd-f2fdf3a4854c"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 771, DateTimeKind.Local).AddTicks(9732),
                            Image = "54874e8e-2699-4ff7-adab-875f528dee59.jpg",
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 771, DateTimeKind.Local).AddTicks(9744),
                            Name = "Apartment"
                        },
                        new
                        {
                            Id = new Guid("ece14410-0615-4ba8-b192-fd4cc7a29148"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 771, DateTimeKind.Local).AddTicks(9785),
                            Image = "520f85dc-c9a8-45c6-b2fc-179150d10285.jpg",
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 771, DateTimeKind.Local).AddTicks(9786),
                            Name = "House"
                        });
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PropertyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alternative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsMain")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PropertyReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("AccuracyScore")
                        .HasColumnType("real");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("CheckInScore")
                        .HasColumnType("real");

                    b.Property<float>("CleanlinessScore")
                        .HasColumnType("real");

                    b.Property<float>("CommunicationScore")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<float>("LocationScore")
                        .HasColumnType("real");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("OverallScore")
                        .HasColumnType("real");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<float>("ValueScore")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("HostId");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("PropertyReviews");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PropertyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("PropertyGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PropertyGroupId");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f29126e0-157e-42f1-bb33-6a1177d8b23d"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 773, DateTimeKind.Local).AddTicks(883),
                            Description = "A place within a multi-unit building or complex owned by the residents.",
                            Icon = "<i class=\"fa-solid fa-apartment\"></i>",
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 773, DateTimeKind.Local).AddTicks(891),
                            Name = "Condo",
                            PropertyGroupId = new Guid("9138421c-0e9f-4d23-85dd-f2fdf3a4854c")
                        },
                        new
                        {
                            Id = new Guid("1b56bf3a-8ee5-468f-be33-3beb1e01713e"),
                            CreatedAt = new DateTime(2022, 10, 3, 14, 32, 14, 773, DateTimeKind.Local).AddTicks(915),
                            Description = "A furnished rental property that includes a kitchen and bathroom and may offer some guest services, like a reception desk.",
                            Icon = "<i class='fa-solid fa-apartment'></i>",
                            IsDisplayed = true,
                            ModifiedAt = new DateTime(2022, 10, 3, 14, 32, 14, 773, DateTimeKind.Local).AddTicks(919),
                            Name = "Vacation House",
                            PropertyGroupId = new Guid("9138421c-0e9f-4d23-85dd-f2fdf3a4854c")
                        });
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdultCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChildCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InfantCount")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDisplayed")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PetCount")
                        .HasColumnType("int");

                    b.Property<int>("PricePerDay")
                        .HasColumnType("int");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceFee")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("HostId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.StateRelated.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.StateRelated.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.StateRelated.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.StateRelated.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDisplayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.AppUser", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.Gender", "Gender")
                        .WithMany("AppUsers")
                        .HasForeignKey("GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.AppUserLanguage", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.AppUser", "AppUser")
                        .WithMany("AppUserLanguages")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.Language", "Language")
                        .WithMany("AppUserLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.GuestReview", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.AppUser", "AppUser")
                        .WithMany("ReviewsAboutYou")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.Host", "Host")
                        .WithMany("ReviewsByYou")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.Reservation", "Reservation")
                        .WithOne("GuestReview")
                        .HasForeignKey("Airbnb.Domain.Entities.AppUserRelated.GuestReview", "ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Host");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.Host", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.AppUser", "AppUser")
                        .WithOne("Host")
                        .HasForeignKey("Airbnb.Domain.Entities.AppUserRelated.Host", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.RefreshToken", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.Amenity", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.AmenityType", "AmenityType")
                        .WithMany("Amenities")
                        .HasForeignKey("AmenityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AmenityType");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.Property", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.AirCover", "AirCover")
                        .WithMany()
                        .HasForeignKey("AirCoverId");

                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.CancellationPolicy", "CancellationPolicy")
                        .WithMany("Properties")
                        .HasForeignKey("CancellationPolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.Host", "Host")
                        .WithMany("Properties")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.PrivacyType", "PrivacyType")
                        .WithMany("Properties")
                        .HasForeignKey("PrivacyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.PropertyGroup", "PropertyGroup")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.StateRelated.State", "State")
                        .WithMany("Properties")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirCover");

                    b.Navigation("CancellationPolicy");

                    b.Navigation("Host");

                    b.Navigation("PrivacyType");

                    b.Navigation("PropertyGroup");

                    b.Navigation("PropertyType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PropertyAmenity", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.Amenity", "Amenity")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.Property", "Property")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PropertyImage", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PropertyReview", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.AppUser", "AppUser")
                        .WithMany("ReviewsByYou")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.Host", "Host")
                        .WithMany("ReviewsAboutYourProperty")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.Reservation", "Reservation")
                        .WithOne("PropertyReview")
                        .HasForeignKey("Airbnb.Domain.Entities.PropertyRelated.PropertyReview", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Host");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PropertyType", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.PropertyGroup", "PropertyGroup")
                        .WithMany("PropertyTypes")
                        .HasForeignKey("PropertyGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PropertyGroup");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.Reservation", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.AppUser", "AppUser")
                        .WithMany("ReservationsYouMade")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.Host", "Host")
                        .WithMany("Reservations")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.Property", "Property")
                        .WithMany("Reservations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Host");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.StateRelated.City", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.StateRelated.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.StateRelated.Country", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.StateRelated.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.StateRelated.State", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.StateRelated.City", "City")
                        .WithMany("States")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.StateRelated.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.PropertyRelated.StateRelated.Region", "Region")
                        .WithMany("States")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Airbnb.Domain.Entities.AppUserRelated.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.AppUser", b =>
                {
                    b.Navigation("AppUserLanguages");

                    b.Navigation("Host");

                    b.Navigation("ReservationsYouMade");

                    b.Navigation("ReviewsAboutYou");

                    b.Navigation("ReviewsByYou");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.Gender", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.Host", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Reservations");

                    b.Navigation("ReviewsAboutYourProperty");

                    b.Navigation("ReviewsByYou");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.AppUserRelated.Language", b =>
                {
                    b.Navigation("AppUserLanguages");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.Amenity", b =>
                {
                    b.Navigation("PropertyAmenities");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.AmenityType", b =>
                {
                    b.Navigation("Amenities");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.CancellationPolicy", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PrivacyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.Property", b =>
                {
                    b.Navigation("PropertyAmenities");

                    b.Navigation("PropertyImages");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PropertyGroup", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("PropertyTypes");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.Reservation", b =>
                {
                    b.Navigation("GuestReview");

                    b.Navigation("PropertyReview");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.StateRelated.City", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.StateRelated.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.StateRelated.Region", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Airbnb.Domain.Entities.PropertyRelated.StateRelated.State", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
